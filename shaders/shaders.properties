sliders=DISTORT_FACTOR SHADOW_BIAS shadowMapResolution SHADOW_DISTORT_FACTOR SHADOW_BRIGHTNESS DAY_TERRAIN_BRIGHTNESS NIGHT_TERRAIN_BRIGHTNESS DAY_TERRAIN_SATURATION NIGHT_TERRAIN_SATURATION DAY_FOG_DENSITY NIGHT_FOG_DENSITY DAY_FOG_BRIGHTNESS NIGHT_FOG_BRIGHTNESS DAY_VIGNETTE NIGHT_VIGNETTE 
sliders = DAY_TERRAIN_BRIGHTNESS NIGHT_TERRAIN_BRIGHTNESS DAY_TERRAIN_SATURATION NIGHT_TERRAIN_SATURATION DAY_FOG_DENSITY NIGHT_FOG_DENSITY DAY_FOG_BRIGHTNESS NIGHT_FOG_BRIGHTNESS DAY_VIGNETTE NIGHT_VIGNETTE

# the result of this expression will go up, down, and back again.
# at time 0 (dawn), roughDayTime is 0.5
# at time 6000 (noon), roughDayTime is 1.0
# at time 12000 (dusk), roughDayTime is 0.5 again
# at time 18000 (midnight), roughDayTime is 0.0
# at time 24000 (dawn), roughDayTime is back to 0.5, and the cycle repeats.
variable.float.roughDayTime = abs((((worldTime + 18000) % 24000) / 12000.0) - 1.0)

# however, roughDayTime follows this cycle linearly.
# we want it to be a bit smoother than that.
# x * x * (3.0 - 2.0 * x) is my go-to equation to smooth out values between 0 and 1.
# when x is between 0 and 1, the smoothened version of x looks very similar to cos(pi * x) * -0.5 + 0.5.
uniform.float.dayTime = roughDayTime * roughDayTime * (3.0 - (2.0 * roughDayTime))

texture.gbuffers.gaux1 = /dither.png
texture.deferred.gaux1 = /dither.png

uniform.float.adjustedTime = abs((((worldTime / 1000.0) + 6.0) % 24.0) - 12.0)
uniform.float.day          = clamp(6.7 - adjustedTime, 0.0, 1.0)
uniform.float.night        = clamp(adjustedTime - 6.7, 0.0, 1.0)
uniform.float.sunset       = (1.0 - day) - night